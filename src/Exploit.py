import pandas as pd
import numpy as np
from openpyxl import load_workbook
import openpyxl
from openpyxl.utils import range_boundaries
from openpyxl.utils.cell import get_column_letter
import csv
import re
from pandas.tseries.offsets import DateOffset
import json
import os
from datetime import datetime, timedelta, date
from itertools import islice

import time
import json
from collections import deque

from src.TF_env3 import TF_environment
from tensorforce import Environment, Runner, Agent

import src.utils as utils

import xlwings as xw

import place_operator as utils_operators


def make_planning(batch_names, formulations, scales, targets, excel_file):
    
    #unmerge the excel file
    df_t = utils.unmerge_excel(excel_file)
    
    
    df_machine_final, df_operator = utils.extract_machine_operator_state(df_t)
    
    target = targets[0]
    target = pd.to_datetime(target)
    futur_length = 100
    end = target + DateOffset(hours = 12*4)#4 = perry duration
    start = end - DateOffset(hours = 12*(futur_length-1))
    
    df_futur_machine = df_machine_final.loc[start:end].copy()
    index_to_keep = df_futur_machine.index + DateOffset(hours = 11, minutes = 59)
    df_futur_machine.set_index(index_to_keep,inplace = True)
    
    df_futur_machine = df_futur_machine.iloc[::-1]
    df_futur_machine.drop(df_futur_machine.index[0], inplace = True)
    
    
    df_futur_machine.operator = np.where(df_futur_machine.operator < 0, 0, df_futur_machine.operator)
    
    df_futur_machine = df_futur_machine[df_machine_final.columns]
    
    
    directory = "model/reccurent_job_ddqn_weekend_final/pleasant-voice-9"
    filename = "0000489888.hdf5"
    
    #model params
    operator_vector_length = 7
    echu_weights = -97
    ordo_weights = 2
    job_finished_weigths = 30
    forward_weights = 0

    
    formulation = formulations[0]
    scale = scales[0]
    batch_name = batch_names[0]
    nbr_operation_max = 15
    nbr_machines = 8
    nbr_operator = 12
    nbr_job_to_use = len(targets)
    
    
    environment = Environment.create(environment = TF_environment(target, formulation,scale, batch_name, nbr_operation_max, nbr_machines, nbr_operator, 
                                                                      operator_vector_length,None, echu_weights = echu_weights,
                                                                      forward_weights = forward_weights, ordo_weights = ordo_weights,
                                                                      job_finished_weigths = job_finished_weigths, independent =False))
        
    
    agent = Agent.load(
            directory = directory,
            filename = filename,
            environment = environment,
            )
    
    
    planning_tot_max = None
    planning_max = None
    lead_time_tot = []
    for j in range(nbr_job_to_use):
        lead_time_min = 1000
        print("job : ", j)
        for tentative in range(20):
            reward_tot = 0
            
            futur_state = df_futur_machine
    
            # Initialize episode
            target = pd.to_datetime(targets[j])
            formulation = formulations[j]
            scale = scales[j]
            batch_name = batch_names[j]
    
            environment.job_name = batch_name
            environment.target = target
            environment.formulation = formulation 
            environment.echelle = scale
            environment.futur_state = futur_state
            states = environment.reset()
            reward_batch = 0
            terminal = False
            internals = agent.initial_internals()
    
            while not terminal:
                 # Episode timestep
                actions, internals = agent.act(states=states, internals = internals, independent=True, deterministic = False)
                states, terminal, reward = environment.execute(actions=actions)
    
                reward_batch += reward
    
            futur_state = environment.get_env().state_full
            reward_tot += reward_batch
            planning = environment.get_env().get_gant_formated()
            
            count = (planning['Start'] == 0).sum()
            if count == 0:
                lead_time = environment.get_env().job.lead_time
                print("tentative : ", tentative, "  : no break", " lead_time : ", lead_time)
                if lead_time < lead_time_min:
                    print("new plann : ", np.mean(lead_time))
    
                    planning_max = planning.copy()
                    futur_state_max = futur_state.copy()
                    lead_time_min = lead_time
        planning_tot_max  = pd.concat([planning_tot_max,planning_max])
        df_futur_machine = futur_state_max
        lead_time_tot.append(lead_time_min)
        
    print("lead time mean : ",np.mean(lead_time_tot))
        
    
    #utils.visualize(planning_tot,historic_time_tot,historic_operator_tot)
    
    
    operation_machine = {
                     (0) : "echu",
                     (1,1) : "Broyage polymère B1",
                     (1,2) : "Broyage polymère B2",
                     (2,1) : "Broyage polymère B1",
                     (2,2) : "Broyage polymère B2",
                     (3,3) : "Tamisage polymère B2",
                     (4,3) : "Tamisage polymère B2",
                     (5,4) : "Mélanges B1 ",
                     (6,4) : "Mélanges B1 ",
                     (7,5) : "Extrusion B2",
                     (8,5) : "Extrusion B2",
                     (9,1) : "Broyage bâtonnets B1 ",
                     (9,2) : "Broyage bâtonnets B2 ",
                     (10,1) : "Broyage bâtonnets B1 ",
                     (10,2) : "Broyage bâtonnets B2 ",
                     (11,3) : "Tamisage Microgranules B2",
                     (12,3) : "Tamisage Microgranules B2",
                     (13,7) : "Milieu de suspension  ",
                     (14,6) : "Combin. des fractions de microgranules",
                     (15,8) : "Remplissage Poudre + liquide B2",
                     }
    
    planning_tot_reformated = planning_tot_max.copy()
    planning_tot_reformated.Finish = planning_tot_reformated.Finish - DateOffset(hours = 11, minutes = 59)
    planning_tot_reformated.Start = planning_tot_reformated.Start + DateOffset(minutes = 1)
    
    #link operation and machine
    op_machine = []
    for index, row in planning_tot_reformated.iterrows():
        
        op = row["Operation"]
        machine = row["Machine"]
        duration = row["Duration"]
        if duration != 0:
            op_machine.append(operation_machine[int(op),int(machine)])
        else:
            op_machine.append(operation_machine[0])
    
    planning_tot_reformated["op_machine"] = op_machine
    
    start = planning_tot_reformated.Start.iloc[0]
    start_min = planning_tot_reformated.Start.min()

    fin_max = planning_tot_reformated.Finish.max()
    
    planning_tot_reformated.sort_values("Start",inplace = True, ignore_index = True)
    print(planning_tot_reformated)
    
    print(start_min, fin_max)

            
    
    operation_machine_excel_rows = {

             "Broyage polymère B1": 4,
             "Broyage polymère B2" : 13,
             "Tamisage polymère B2" : 22,          
             "Mélanges B1 " : 29,
             "Extrusion B2" : 54,
             "Broyage bâtonnets B1 " : 61,
             "Broyage bâtonnets B2 " : 71,
             "Tamisage Microgranules B2" : 81,
             "Milieu de suspension  " : 98,
             "Combin. des fractions de microgranules" : 88,
             "Remplissage Poudre + liquide B2" : 104,
             }
    
    operator_excel_rows = {
        "SFR" : 192, 
        "BPI" : 194, 
        "JPI" : 196, 
        "JDD" : 198, 
        "FDS" : 200, 
        "SFH" : 202, 
        "NDE" : 204, 
        "LTF" : 206, 
        "SRG" : 208, 
        "JPE" : 210, 
        "RPI" : 212, 
        "ANA" : 214,
        "MTR" : 216, 
        "CMT" : 218, 
        "CGR" : 220, 
        "CPO" : 222, 
        "REA" : 224
    }
    
    operation_occupations = {
        "Broyage polymère B1": "BP",
        "Broyage polymère B2" : "BP",
        "Tamisage polymère B2" : "TP",          
        "Mélanges B1 " : "MEL",
        "Extrusion B2" : "EXT",
        "Broyage bâtonnets B1 " : "BB",
        "Broyage bâtonnets B2 " : "BB",
        "Tamisage Microgranules B2" : "TM",
        "Milieu de suspension  " : "MILIEU",
        "Combin. des fractions de microgranules" : "CF",
        "Remplissage Poudre + liquide B2" : "LYO",
    }
    
    
    #FOR THE ORDONNANCING OF OPERATOR
    selected_operators = utils_operators.place_operator(df_operator, planning_tot_reformated)

    wb = xw.Book(excel_file)
    ws = wb.sheets["PLANNING"]
    
    rng = ws.range("A1:AQN1")
    
    
    #create the color for each job
    color_dict = {}
    for job in batch_names:
        color = tuple(np.random.choice(range(256), size=3))
        color_dict[job] = color
    
    
    
    for r in rng:
        
        current_date = pd.to_datetime(r.value)
        if current_date is not None:
            for i, row in planning_tot_reformated.iterrows():
                afternoon = False
                op_date = row.at["Start"]
                if current_date.day_of_year == op_date.day_of_year:
                    op = row.at["op_machine"]
                    excel_row_index_operation = operation_machine_excel_rows[op]
                    
                    operators = selected_operators[i]
                    excel_row_index_operator = [operator_excel_rows[o] for o in operators]
                    
                    if op_date.hour != 0:
                        r = r.offset(column_offset = 1)
                        afternoon = True
                    
                    duration = row["Duration"].days * 2 + row["Duration"].seconds//3600 //12
                    print(duration)
                    last_excel_cell_operation = 0
                    last_excel_cell_operators = []
                    for j in range(duration):
                        if afternoon:
                            if j > 0:
                                colum_letter = get_column_letter(r.offset(column_offset = j+1).column)
                            else:
                                colum_letter = get_column_letter(r.offset(column_offset = j).column)
                        else:
                            if j > 1:
                                colum_letter = get_column_letter(r.offset(column_offset = j+1).column)
                                
                            else:
                                colum_letter = get_column_letter(r.offset(column_offset = j).column)
                                
                        excel_cell_operation = colum_letter + str(excel_row_index_operation)
                        excel_cell_operators = [colum_letter + str(index_operator) for index_operator in excel_row_index_operator]
                        
                        
                        
                        if (duration == 2 or duration ==4) and (j == 1 or j == 3):
                            ws.range(last_excel_cell_operation + ":" + excel_cell_operation).merge()
                            
                            for n,excel_cell_operator in enumerate(excel_cell_operators):
                                ws.range(last_excel_cell_operators[n] + ":" + excel_cell_operator).merge()
                                
                        else:
                            ws.range(excel_cell_operation).value = row["Job"]
                            ws.range(excel_cell_operation).color = color_dict[row["Job"]]
                            
                            for excel_cell_operator in excel_cell_operators:
                                ws.range(excel_cell_operator).value = operation_occupations[row["op_machine"]]
                                ws.range(excel_cell_operator).color = color_dict[row["Job"]]
                            
                            
                        last_excel_cell_operation = excel_cell_operation
                        last_excel_cell_operators = excel_cell_operators
                        
                        
make_planning(["batch_names"], [1], [20000], ["2022-09-26 00:00:00"], "C:/Users/LDE/Prog/projet_master/digital_twins/data/Planning_Production_2022_test.xlsm")