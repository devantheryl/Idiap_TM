import pandas as pd

from pandas.tseries.offsets import DateOffset



from src.TF_env3 import TF_environment
from tensorforce import Environment, Agent

import src.utils as utils



import place_operator as utils_operators
import place_operations as utils_operations

import operator_stats as op_stats


def make_planning(batch_names, formulations, scales, targets, excel_file):
    
    #unmerge the excel file
    df_t = utils.unmerge_excel(excel_file)
    
    
    #get the disponibility of ressources
    df_machine, df_operator = utils.extract_machine_operator_state(df_t)
    
    #
    operator_stats_df = op_stats.get_operators_stats(excel_file)
    
    
    directory = "model/reccurent_job_ddqn_weekend_final/pleasant-voice-9"
    filename = "0000489888.hdf5"
    
    #model params
    operator_vector_length = 7
    echu_weights = -97
    ordo_weights = 2
    job_finished_weigths = 30
    forward_weights = 0

    #environment params
    nbr_operation_max = 15
    nbr_machines = 8

    
    #create the environment and the agent 
    environment = Environment.create(environment = TF_environment(nbr_operation_max, nbr_machines, operator_vector_length, 
                                                                  echu_weights = echu_weights,forward_weights = forward_weights, ordo_weights = ordo_weights,
                                                                  job_finished_weigths = job_finished_weigths, independent =False))
        
    agent = Agent.load(
            directory = directory,
            filename = filename,
            environment = environment,
            )
    
    #plan all the operations
    planning_tot_max, lead_time = utils_operations.place_operations(agent, environment, df_machine,
                                                                    targets, formulations, scales, batch_names)
    
    operation_machine = {
                     (0) : "echu",
                     (0,0) : "Broyage polymère B1",
                     (0,1) : "Broyage polymère B2",
                     (1,0) : "Broyage polymère B1",
                     (1,1) : "Broyage polymère B2",
                     (2,2) : "Tamisage polymère B2",
                     (3,2) : "Tamisage polymère B2",
                     (4,3) : "Mélanges B1 ",
                     (5,3) : "Mélanges B1 ",
                     (6,4) : "Extrusion B2",
                     (7,4) : "Extrusion B2",
                     (8,0) : "Broyage bâtonnets B1 ",
                     (8,1) : "Broyage bâtonnets B2 ",
                     (9,0) : "Broyage bâtonnets B1 ",
                     (9,1) : "Broyage bâtonnets B2 ",
                     (10,2) : "Tamisage Microgranules B2",
                     (11,2) : "Tamisage Microgranules B2",
                     (12,6) : "Milieu de suspension  ",
                     (13,5) : "Combin. des fractions de microgranules",
                     (14,7) : "Remplissage Poudre + liquide B2",
                     }
    


    
    #reformat the planning to make it plotable
    planning_tot_reformated = planning_tot_max.copy()
    planning_tot_reformated.Finish = planning_tot_reformated.Finish - DateOffset(hours = 11, minutes = 59)
    planning_tot_reformated.Start = planning_tot_reformated.Start + DateOffset(minutes = 1)
    
    #link operation and machine
    op_machine = []
    for index, row in planning_tot_reformated.iterrows():
        
        op = row["Operation"]
        machine = row["Machine"]
        duration = row["Duration"]
        if duration != 0:
            op_machine.append(operation_machine[int(op),int(machine)])
        else:
            op_machine.append(operation_machine[0])
    
    planning_tot_reformated["op_machine"] = op_machine
    
    start = planning_tot_reformated.Start.iloc[0]

    
    planning_tot_reformated.sort_values("Start",inplace = True, ignore_index = True)

    
    
    
    #split the operation with a durée > 1 into little operation
    planning_tot_final = pd.DataFrame()
    for operation in planning_tot_reformated.iterrows():

        start = operation[1].Start
        end = operation[1].Finish
        date_index = pd.date_range(start = start, end = end, freq = "12H")# 12h
        if len(date_index) == 4:
            #planning_tot_reformated.drop(operation_index, inplace = True)
            for i in range(2):
                new_row = operation[1].copy()
                new_row["Start"] = date_index[2*i]
                new_row["Finish"] = date_index[2*i+1]
                new_row["Duration"] = new_row["Finish"] + DateOffset(hours = 12) - new_row["Start"]
                planning_tot_final = pd.concat([planning_tot_final, new_row.to_frame().T], ignore_index = True)
                #planning_tot_final = planning_tot_final.append(new_row, ignore_index = True)
        else:
            
            #planning_tot_final = planning_tot_final.append(operation[1].copy(), ignore_index = True)
            planning_tot_final = pd.concat([planning_tot_final, operation[1].to_frame().T], ignore_index = True)
    
    
    
    
    #FOR THE ORDONNANCING OF OPERATOR
    selected_operators, planning_octo_laverie, placed_purcentage = utils_operators.place_operator(df_operator, planning_tot_final, operator_stats_df)


    utils.visualize(excel_file, batch_names, planning_tot_final, selected_operators, planning_octo_laverie)

                        
          
#make_planning(["batch_names1","batch_names2","batch_names3","batch_names4","batch_names5"], [1,3,1,3,6], [20000,20000,20000,20000,20000], ["2022-09-06 00:00:00","2022-09-12 00:00:00","2022-09-19 00:00:00","2022-09-26 00:00:00","2022-10-03 00:00:00"], "C:/Users/LDE/Prog/projet_master/digital_twins/data/Planning_Production_2022_test.xlsm")
#make_planning(["batch_names2"], [6], [20000], ["2022-10-10 00:00:00"], "C:/Users/LDE/Prog/projet_master/digital_twins/data/Planning_Production_2022_test.xlsm")